%% This generates the all plots for main paper 
% This script generates all the plots for the main paper 

close all
%---------------Assign plotting macros----------------------------
set(groot,'DefaultTextInterpreter','latex')
set(groot,'DefaultLegendInterpreter','latex')
set(groot,'DefaultAxesTickLabelInterpreter','latex')
set(groot,'DefaultTextFontname', 'CMU Serif')
set(groot,'DefaultAxesFontName', 'CMU Serif')
set(groot,'DefaultLineLineWidth',1)
set(0, 'DefaultFigureRenderer', 'painters');
set(groot,'DefaultAxesFontSize',12);
cmap_data = load('data/red_blue_cmap.mat');  %load in colourmap
warning('off')

painters_on=0; % ensures high quality figures, uncomment for speed.

parameters % import model parameters



% --------------Figure 2: VWF model compared to data---------------------
params=load('data/fitted_parameters.txt'); % load the fitted VWF params for L=22.6
full_params=[params,LL];
sr_vec=logspace(0,5,400)'; % vector of shear rate values to plot over

lip=1./(1+exp(-(sr_vec-5522)/1271)); % Lippok et al 2016 fitting

% Schneider et al. 2007 extension data
% (first column is shear rate second is VWF length in microns)
sch=[1, 1.0810810810810807;
10.00000000000001, 1.0810810810810807;
100, 1.1226611226611247;
398.1071705534969, 1.0810810810810807;
1751.7747448309788, 1.2058212058212057;
4863.585127384103, 12.515592515592514;
7864.156977348052, 15.01039501039501]; 


% Calculate VWF length in shear flow over these shear rates
[length_v,~]=vwf_extension_shear(full_params,sr_vec); 
rel_ext=(length_v-1)/max(length_v-1); %relative extension
rel_len=length_v/max(length_v); %relative length

% Plot figure
figure1=figure('units','inch','position',[0,0,10,3.5]);

t=tiledlayout(1,3); %1x3 subplots
nexttile


% VWF relaxation time (dimesional)
tau=alpha*((tanh(beta*(sr_vec-gamma_star))+1)/2+delta); 
lk=xline(5096); hold on
lk.LineStyle='-.';
semilogx(sr_vec,tau,'k','linewidth',1); hold on
title('(a) Relaxation time $\tau$ (s)','Interpreter','latex')
set(gca,'XScale','log');
xticks([1,10,10^2,10^3,10^4,10^5]);
ylim([0,0.08]);
xlim([10,1e5]);
xlabel(' Shear rate $\dot{\gamma}$ (s$^{-1}$)','Interpreter','latex')
legend('$5,096$ s$^{-1}$','Location','northwest')
box on

% Relative VWF  extension compared to Lippok et al.
nexttile
plot(sr_vec,rel_ext,'k'); hold on
plot(sr_vec,lip,'r');
lk= xline(5096);
lk.LineStyle='-.';
xlim([10,1e5]);
legend('VWF model','Lippok et al.','$5,096$ s$^{-1}$','Interpreter','latex','Location','northwest')
xlabel(' Shear rate $\dot{\gamma}$ (s$^{-1}$)');
ylim([0,1.1])
xticks([1,10,10^2,10^3,10^4,10^5])
set(gca,'XScale','log');
title('(b) Relative VWF extension')

% Normalised VWF length compared to Schnieder et al.
nexttile
plot(sr_vec,length_v,'k'); hold on
plot(sch(:,1),sch(:,2),'r.','MarkerSize',10)
lk=xline(5096);
lk.LineStyle='-.';
xlim([10,1e5]);
ylim([0,17]);
legend('VWF model','Schneider et al.','$5,096$ s$^{-1}$','Interpreter','latex','Location','northwest')
title('(c) VWF length')
set(gca,'XScale','log');
xticks([1,10,10^2,10^3,10^4,10^5])
xlabel(' Shear rate $\dot{\gamma}$ ($s^{-1}$)');
t.TileSpacing = 'compact';
t.Padding = 'compact';
exportgraphics(figure1,'figs/model_vwf_fit.eps','ContentType','vector')


%
% ---------------Figure 3: Sensitivity of model to length variation-----

ll=[5,10,15,50,75,100]; % Values of L explored in fitting:
% we will plot for L=5 and L=100

% import fitted para
% meters generated by analysis.m
params_fitted=load('params_fitted_L.mat' ,"-mat");
params_fitted_L=params_fitted.params_fitted_L;

%we first use the fitted parameters to calculate VWF's length in shear and
%elongational flows for those parameters.
i=1;% L=5 parameters
params=[params_fitted_L(i,:),ll(i)];
sr_vec=logspace(0,5,2000)';
[len2,~]=fene_extension_elong(params,if_mod,sr_vec); %run VWF model: shear
rel_ext_e1=(len2-1)/max(len2-1);%relative extension
[length_v,~]=vwf_extension_shear(params,sr_vec); % run VWF model: elong
rel_ext1=(length_v-1)/max(length_v-1);%relative extension

i=6; % L=100 parameters
params=[params_fitted_L(i,:),ll(i)];
[len2,~]=fene_extension_elong(params,if_mod,sr_vec); %run VWF model: shear
rel_ext_e6=(len2-1)/max(len2-1);%relative extension
[length_v,~]=vwf_extension_shear(params,sr_vec); % run VWF model: elong
rel_ext6=(length_v-1)/max(length_v-1);%relative extension

% generate data for L=22.6 as used in earlier plots.
params=[x_current,LL];
[len2,~]=fene_extension_elong(params,if_mod,sr_vec); %run VWF model
rel_ext_e=(len2-1)/max(len2-1);%relative extension
[length_v,~]=vwf_extension_shear(params,sr_vec);
rel_ext=(length_v-1)/max(length_v-1);%r

% We now use interpolation to determine the shear rate at which VWF is half
% unfolded in elongational flow.

half=0.5; %21.0788/2
[C, ia, ~] = unique(rel_ext_e6);
sr_half6 = interp1(C,sr_vec(ia),half);
[C, ia, ~] = unique(rel_ext_e1);
sr_half1 = interp1(C,sr_vec(ia),half);

% plot results ------
figure1=figure('units','inch','position',[0,0,8.25,4 ...
    ]);
t=tiledlayout(1,2);
x2 = [sr_vec; flipud(sr_vec)];
inBetweenshear = [rel_ext1; flipud(rel_ext6)];
inBetween_elong = [rel_ext_e1;flip(rel_ext_e6)];

nexttile %  shear flow plot

lip=1./(1+exp(-(sr_vec-5522)/1271));
l=patch(x2, inBetweenshear, [0.8,0.8,0.8]); hold on
l.EdgeColor='none';
plot(sr_vec,lip,'r'); hold on
plot(sr_vec,rel_ext,'k'); hold on
xlim([200,5e4])
lk=xline(5096);
lk.LineStyle='-.';
box on 
title('(a) Fitted pure shear flow behaviour')
legend('Range of fit for L = 5 - 100','Lippok et al.',...
    'Model fit for L $=22.6$','5,096s$^{-1}$',...
    'Interpreter','latex','Location','northwest');
xlabel('Shear rate $\dot{\gamma}$ (s$^{-1}$)');
ylabel('VWF extension, $\mathcal{E}$');
ylim([0,1.1])
    set(gca,'XScale','log');
xticks([1,10,10^2,10^3,10^4,10^5])


nexttile % elongational flow plot
l=patch(x2, inBetween_elong, [0.8,0.8,0.8]); hold on
l.EdgeColor='none';
plot(sr_vec,rel_ext_e,'k'); hold on
                xlim([200,5e4])

lk1=xline(sr_half6);
lk1.LineStyle='-.';
lk1=xline(sr_half1);
lk1.LineStyle='--';
lk=legend('Prediction range','Prediction for L $=22.6$',...
    'Min $=635$ s$^{-1}$ (L $=100$)','Max $=3,280$ s$^{-1}$ (L $=5$)',...
    'Interpreter','latex','Location','northwest');
xlabel(' Shear rate $\dot{\gamma}$ (s$^{-1}$)');
lk.Location='southeast';
title('(b) Predicted pure elongational flow behaviour')
ylim([0,1.1])
    set(gca,'XScale','log');
xticks([1,10,10^2,10^3,10^4,10^5])
box on

t.TileSpacing='compact';
t.Padding='tight';
exportgraphics(figure1,'figs/model_params.eps','ContentType','vector')


%-------- Figure 4: VWF model in shear and elongational flow-------
% Note this figure is augmented in inkscape to add diagrams above.


if_mod=1;
fitted_params=load('data/fitted_parameters.txt'); % import fitted VWF parameters

sr_vec=logspace(0,5,1000); % array of shear rates to plot at 
params=[fitted_params,LL]; % add fixed VWF length  
[~,A]=vwf_extension_shear(params,sr_vec); %run VWF model shear flow
[~,A_e]=fene_extension_elong(params,if_mod,sr_vec); %run VWF model elongational flow

% Estimate 50% unfolding shear rate 
len=((A(:,1)+A(:,3))/2).^0.5; %calculate length 
half=max(((A(:,1)+A(:,3))/2).^0.5)/2; %calculate 50% of VWF's maximum length 

[C, ia, ~] = unique(len); % remove duplicate points where Len=1 or Len=LL
sr_half = interp1(C,sr_vec( ia),half); % find shear rate

% find values of extension for inset schematics
len_100 = interp1(sr_vec(ia),C,100);
len_2000 = interp1(sr_vec(ia),C,2e3);
len_5000 = interp1(sr_vec(ia),C,5e3);


len2=((A_e(:,1)+A_e(:,2))/2).^0.5; %calculate length 
[C, ia, ~] = unique(len2); 
sr_half_e = interp1(C,sr_vec(ia),half);

% find values of extension for inset schematics
len_100_e = interp1(sr_vec(ia),C,100);
len_2000_e = interp1(sr_vec(ia),C,2e3);
len_5000_e = interp1(sr_vec(ia),C,5e3);


% plot figure
figure1=figure('units','inch','position',[0,0,8.5,3.5]);
t=tiledlayout(1,2);
nexttile
plot(sr_vec,len,'r'); hold on
plot(sr_vec,(A(:,1)).^0.5,'k'); hold on
plot(sr_vec,(A(:,3)).^0.5,'color',[0.5,0.5,0.5])
set(gca,'XScale','log');
lk=xline(sr_half);
ylim([0,23])
scatter(100,len_100,'k','filled'); hold on
scatter(2e3,len_2000,'k','filled'); hold on
scatter(5e3,len_5000,'k','filled'); hold on


lk.LineStyle='-.';
legend({'$\mathcal{L}$','$\sqrt{A_{xx}}$','$\sqrt{A_{yy}}$','5,096s$^{-1}$'},'Location','northwest','FontSize',12);
ylabel('VWF Length' );
xlabel(' Shear rate $\dot{\gamma}$ (s$^{-1}$)');
xlim([100,1e5])
xticks([1,10^1,10^2,10^3,10^4,10^5])
if_mod=1;
ylim([0,23])

nexttile
plot(sr_vec,len2,'r'); hold on
plot(sr_vec,A_e(:,1).^0.5,'k','linewidth',1); hold on
plot(sr_vec,A_e(:,2).^0.5,'linewidth',1,'color',[0.5,0.5,0.5])
set(gca,'XScale','log');
xticks([1,10^1,10^2,10^3,10^4,10^5  ])
lk=xline(sr_half_e);
lk.LineStyle='-.';

scatter(100,len_100_e,'k','filled'); hold on
scatter(2e3,len_2000_e,'k','filled'); hold on
scatter(5e3,len_5000_e,'k','filled'); hold on

lk.Color='k';
legend({'$\mathcal{L}$','$\sqrt{A_{xx}}$',...
'$\sqrt{A_{yy}}$','1,947s$^{-1}$'},'Location','northwest','FontSize',12);
xlabel(' Shear rate $\dot{\gamma}$ (s$^{-1}$)');
ylim([0,23])
xlim([100,1e5])

t.TileSpacing = 'compact';
t.Padding = 'compact';
box on
exportgraphics(figure1,'figs/fene.eps','ContentType','vector')


%------Figure 6: heat plots of solution------------------------------------

% Import data for heat plots from selected simulation
Re=400;
h=0.5;
l1=1.5;
l2=2;
lc=0.025;

path='data/Re_'+string(Re)+'h-'+string(h)+'l1-'+string(l1)+'l2-'+string(l2)+'/';

% Import all solutions as txt files
U=importdata(path+'usol.txt');
W=importdata(path+'wsol.txt');
E=importdata(path+'extsol.txt');
rr=importdata(path+'rrsol.txt');
zz=importdata(path+'zzsol.txt');
sr=importdata(path+'sr.txt');
psi=importdata(path+'psi.txt');
tot=importdata(path+'tot.txt');


% Triangulate data to enable plotting of meshed data 
bounda=0.5; %sensitivity for defining boundary from convex hull of mesh points. 

[~,~,~,~,zu,~]=extract(U,bounda);
[~,~,~,~,zw,~]=extract(W,bounda);
[~,~,~,~,ze,~]=extract(E,bounda);
[~,~,~,~,zrr,~]=extract(rr,bounda);
[DT,IO,x,y,zzz,k]=extract(zz,bounda);
[~,~,~,~,zsr,~]=extract(sr,bounda);
[~,~,~,~,zpsi,~]=extract(psi,bounda);
[~,~,~,~,ztot,~]=extract(tot,bounda);

%%Grids for getting streamlines
[xq,yq] = meshgrid(-10:0.01:30, 0:.001:1);
zpsi = griddata(x,y,zpsi,xq,yq);


ze_cal=sqrt(ze+1)-1;% calculate the VWF extension 


heat_plot(x,y,(zu.^2+zw.^2).^1/2,xq,yq,zpsi,DT,IO,'(a) Fluid Velocity Magnitude','$|\bf{u}|$','U_plot',1,cmap_data,painters_on)
heat_plot(x,y,zsr,xq,yq,zpsi,DT,IO,'(b) Fluid Shear Rate','$\dot{\gamma}$','sr_plot',1,cmap_data,painters_on)
heat_plot(x,y,ze_cal,xq,yq,zpsi,DT,IO,'(c) VWF Extension','$\mathcal{E}$','E_plot',1,cmap_data,painters_on)



% --------------Figure 7: varying geometry------------------
% this section, extracts the solution of the FENE-P equation and the shear
% rate on the wall of the domain and plots on a 3x2 grid.

figure1=figure('units','inch','position',[0,0,8,5]);
t=tiledlayout(2,3);

nexttile
colors=[0,0,0;0.5,0.5,0.5;0.231372549019608,0.298039215686275,0.752941176470588;0.705882352941177,0.0156862745098039,0.1490196078431370];
set(gca,'linestyleorder',{'-','-.','--',':'}, 'colororder',colors,'nextplot','add')

set(0, 'DefaultFigureRenderer', 'painters');

Res=[500,400,300,200];
h=0.5;
l1=1.5;
l2=2;
lc=0.025;

for i=1:length(Res)
Re=Res(i);
path='data/Re_'+string(Re)+'h-'+string(h)+'l1-'+string(l1)+'l2-'+string(l2);
xbase=importdata(path+'/x_base.txt');
sr=importdata(path+'/wss.txt');
[xb,sr]=sort_v(xbase,sr);
plot(xb,Re*sr); hold on

end
xlim([-7,7])
box on
ylabel('Scaled WSR, $Re \dot{\gamma}$','Interpreter','latex');
title('  (a) Reynolds Number','Interpreter','latex')
legend('$Re=500$','$Re=400$','$Re=300$','$Re=200$')


nexttile
set(gca,'linestyleorder',{'-','-.','--',':'}, 'colororder',colors,'nextplot','add')
l2s=[2,3,4,5];
Re=500;
for i=1:length(l2s)
l2=l2s(i);
path='data/Re_'+string(Re)+'h-'+string(h)+'l1-'+string(l1)+'l2-'+string(l2);
xbase=importdata(path+'/x_base.txt');
sr=importdata(path+'/wss.txt');
[xb,sr]=sort_v(xbase,sr);
plot(xb,Re*sr); hold on
end
xlim([-7,7])
legend('$\hat{l}_2=2$','$\hat{l}_2=3$','$\hat{l}_2=4$','$\hat{l}_2=5$')
box on
title('(b) Steepness','Interpreter','latex')

nexttile
set(gca,'linestyleorder',{'-','-.','--',':'}, 'colororder',colors,'nextplot','add')
hs=[0.5,0.4,0.3,0.2];
l2=2;
Re=500;
for i=1:length(hs)
h=hs(i);
path='data/Re_'+string(Re)+'h-'+string(h)+'l1-'+string(l1)+'l2-'+string(l2);
xbase=importdata(path+'/x_base.txt');
sr=importdata(path+'/wss.txt');
[xb,sr]=sort_v(xbase,sr);
plot(xb,Re*sr); hold on
end
xlim([-7,7])
legend('$\hat{h}=0.5$','$\hat{h}=0.5$','$\hat{h}=0.3$','$\hat{h}=0.2$')
box on
title('(c) Stenosis height','Interpreter','latex')


nexttile
l2=2;
h=0.5;

set(gca,'linestyleorder',{'-','-.','--',':'}, 'colororder',colors,'nextplot','add')
for i=1:length(Res)
Re=Res(i);
path='data/Re_'+string(Re)+'h-'+string(h)+'l1-'+string(l1)+'l2-'+string(l2);
xbase=importdata(path+'/x_base.txt');
sr=importdata(path+'/base_ext.txt');
[xb,sr]=sort_v(xbase,sr);
plot(xb,sqrt(sr)); hold on
end
xlim([-7,7])
ylabel('VWF Extension, $\mathcal{E}$','Interpreter','latex');
ylim([0,22])
lk=yline(21.21);
lk.LineStyle='-.';
xlabel('$z$ ','Interpreter','latex');
box on
nexttile
set(gca,'linestyleorder',{'-','-.','--',':'}, 'colororder',colors,'nextplot','add')

Re=500;
l2=2;
l1=1.5;
h=0.5;
for i=1:length(l2s)
l2=l2s(i);
path='data/Re_'+string(Re)+'h-'+string(h)+'l1-'+string(l1)+'l2-'+string(l2);
xbase=importdata(path+'/x_base.txt');
sr=importdata(path+'/base_ext.txt');
[xb,sr]=sort_v(xbase,sr);
plot(xb,sqrt(sr)); hold on

end
xlim([-7,7])
lk=yline(21.21);
lk.LineStyle='-.';
xlabel('$z$ ','Interpreter','latex');
box on
ylim([0,22])

nexttile
set(gca,'linestyleorder',{'-','-.','--',':'}, 'colororder',colors,'nextplot','add')


hs=[0.5,0.4,0.3,0.2];
l2=2;
Re=500;
for i=1:length(hs)
h=hs(i);
path='data/Re_'+string(Re)+'h-'+string(h)+'l1-'+string(l1)+'l2-'+string(l2);
xbase=importdata(path+'/x_base.txt');
sr=importdata(path+'/base_ext.txt');
[xb,sr]=sort_v(xbase,sr);
plot(xb,sqrt(sr)); hold on
end
xlim([-7,7])
lk=yline(21.21);
lk.LineStyle='-.';
box on
ylim([0,22])

t.TileSpacing = 'compact';
t.Padding = 'compact';
exportgraphics(figure1,'figs/total_dynamics.eps','ContentType','vector')


%------Figure 8: flow structure plot------------------------------------
%%
% this section, extracts the fluid solutions and plots the
% difference between shear and rotation on a heat plot for two different
% geometries.

cmap_data = load('data/red_blue_cmap.mat');  %load in colourmap
Re=500;
h=0.5;
l1=1.5;
lc=0.025;

% case 1: l2=5 using strict boundary tolerance
l2=5;
path='data/Re_'+string(Re)+'h-'+string(h)+'l1-'+string(l1)+'l2-'+string(l2)+'/';
tot=importdata(path+'tot.txt');
sr=importdata(path+'sr.txt');
rot=importdata(path+'rot.txt');
ex=importdata(path+'extsol.txt');

bounda=0.4;
[DT5,IO5,x5,y5,ztot5,k5]=extract(tot,bounda);
[~,~,~,~,sr5,~]=extract(sr,bounda);
[~,~,~,~,rot5,~]=extract(rot,bounda);
[~,~,~,~,ze5,~]=extract(ex,bounda);

% case 2: l2=2 using lenient boundary tolerance
l2=2;
path='data/Re_'+string(Re)+'h-'+string(h)+'l1-'+string(l1)+'l2-'+string(l2)+'/';
tot2=importdata(path+'tot.txt');
sr=importdata(path+'sr.txt');
ex=importdata(path+'extsol.txt');
rot=importdata(path+'rot.txt');

bounda=0.2;
[DT2,IO2,fitted_params,y2,ztot2,k2]=extract(tot2,bounda);
[~,~,~,~,sr2,~]=extract(sr,bounda);
[~,~,~,~,ze2,~]=extract(ex,bounda);
[~,~,~,~,rot2,~]=extract(rot,bounda);

% Extract contour of \dot{\gamma}-\dot{\omega}=0.2 ~ elongational flow
[xq,yq] = meshgrid(-10:0.1:10, -1:0.01:1);
vr = griddata([x5;x5],[y5;-y5],[ztot5;ztot5],xq,yq);
[c5]=contour(xq,yq,vr,-[0.2,2]); hold on

[xq,yq] = meshgrid(-10:0.1:10, -1:0.01:1);
vr = griddata([fitted_params;fitted_params],[y2;-y2],[ztot2;ztot2],xq,yq);
[c2]=contour(xq,yq,vr,-[0.2,-2]);

[start5,end5]=find(~c5(2,:));
[start2,end2]=find(~c2);


% plot figure------------------------------------

set(0, 'DefaultFigureRenderer', 'opengl');
scale=1.3;
set(groot,'DefaultAxesFontSize',12*scale);

figure1=figure('units','inch','position',[0,0,8*scale,3*scale]);
t=tiledlayout(1,2);
nexttile % ax_vel = axes;

plot3(c5(1,end5(1):6:end5(2)),c5(2,end5(1):6:end5(2)),100*ones(size(c5(2,end5(1):6:end5(2)))),'k-.','LineWidth',0.2*scale); hold on

s=trisurf(DT5(IO5, :),x5,y5,(abs(sr5)-abs(rot5)),'FaceColor','interp'); hold on
s.EdgeColor='none';
view(2)

xlim([-10,10])
title('(a) Shallow Stenosis, $l_2=5$')
colormap(cmap_data.cmap)
plot3([-10,10,10,-10,-10],[0,0,1,1,0],[100,100,100,100,100],'k','LineWidth',0.2)
grid off
legend('$(\dot{\gamma}-\dot{\omega})>0.1$')

ylim([0,1])
xlabel('$z$');
ylabel('$r$','Interpreter','latex')
 caxis([-1.55,1.55]);

nexttile 
% lam=(abs(sr2)-abs(rot2))./(abs(sr2)+abs(rot2));
plot3(c2(1,2:6:end),c2(2,2:6:end),100*ones(size(c2(1,2:6:end))),'k-.',...
'LineWidth',0.2*scale); hold on
s=trisurf(DT2(IO2, :),fitted_params,y2,(abs(sr2)-abs(rot2)),'FaceColor','interp'); hold on
s.EdgeColor='none';
view(2)
plot3([-10,10,10,-10,-10],[0,0,1,1,0],[100,100,100,100,100],'k','LineWidth',0.2)
 caxis([-1.55,1.55]);

ylim([0,1])
xlim([-10,10])
t.TileSpacing = 'compact';
t.Padding = 'compact';title('(b) Steep Stenosis, $l_2=2$')
a=colorbar('TickLabelInterpreter','latex');
a.Label.String = '$\dot{\gamma}-\dot{\omega}$';
a.Label.Interpreter = 'latex';
a.Label.FontSize = 1*scale;
box on
xlabel('$z$');
grid off
% exportgraphics(figure1,'data/class.eps','ContentType','vector')


%%

cmap_data = load('data/red_blue_cmap.mat');  %load into structure

 set(0, 'DefaultFigureRenderer', 'opengl');
scale=1.3;
set(groot,'DefaultAxesFontSize',12*scale);

figure1=figure('units','inch','position',[0,0,8*scale,3*scale]);
t=tiledlayout(1,2);
nexttile % ax_vel = axes;

plot3(c5(1,end5(1):6:end5(2)),c5(2,end5(1):6:end5(2)),100*ones(size(c5(2,end5(1):6:end5(2)))),'k-.','LineWidth',0.2*scale); hold on
lam=(abs(sr2)-abs(rot2));

s=trisurf(DT2(IO2, :),fitted_params,y2,lam,'FaceColor','interp'); hold on
s.EdgeColor='none';
view(2)
colorbar
xlim([-10,10])
title('(a) Shallow Stenosis, $l_2=5$')
colormap(cmap_data.cmap)
plot3([-10,10,10,-10,-10],[0,0,1,1,0],[100,100,100,100,100],'k','LineWidth',0.2)
grid off
legend('$(\dot{\gamma}-\dot{\omega})=0.2$')

ylim([0,1])
xlabel('$z$');
ylabel('$r$','Interpreter','latex')

nexttile 
lam=(abs(sr2)-abs(rot2));
plot3(c2(1,2:6:end),c2(2,2:6:end),100*ones(size(c2(1,2:6:end))),'k-.','LineWidth',0.2*scale); hold on
s=trisurf(DT2(IO2, :),fitted_params,y2,real(sqrt(lam)).*abs(sr2/2)*gamma_scale*1e-3,'FaceColor','interp'); hold on
s.EdgeColor='none';
view(2)
plot3([-10,10,10,-10,-10],[0,0,1,1,0],[100,100,100,100,100],'k','LineWidth',0.2)

 caxis([-1.55,1.55]);
ylim([0,1])
xlim([-10,10])
t.TileSpacing = 'compact';
t.Padding = 'compact';title('(b) Steep Stenosis, $l_2=2$')
a=colorbar('TickLabelInterpreter','latex');
a.Label.String = '$\dot{\gamma}-\dot{\omega}$';
a.Label.Interpreter = 'latex';
a.Label.FontSize = 1*scale;
box on
box on
xlabel('$z$');
grid off
% exportgraphics(figure1,'data/class.eps','ContentType','vector')




% Find max SR and max E inside contour of elongation for values in text
[in,~] = inpolygon(fitted_params,y2,c2(1,:),c2(2,:));

max(sr2)
sqrt(max(ze2(in)))/21*100
sqrt(max(ze2))

[in,~] = inpolygon(x5,y5,c5(1,:),c5(2,:));

max(sr5)
sqrt(max(ze5(in)))/21*100
sqrt(max(ze5))/21*100





function[xb,var_sort]=sort_v(x,var)


A=[x,var];
B=sortrows(A,1);
xb=B(:,1);
var_sort=B(:,2:end);
end